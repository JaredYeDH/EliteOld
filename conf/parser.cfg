<program> = <def_statements> ;

<func_def_name> = "static"|"extern"|"virtual"|"abstract"|"in"|"out" ;

<func_def_xs> = <func_def_name>
			  | <func_def_xs> <func_def_name>
			  ;

<def_statement> = <var_def> ";" 
                | <func_def> 
                | <marco_def>
                | <macro_call>
                | "`" <full_list>
                | <func_def_xs> <func_def> 
                ;

<def_statements> = <def_statement> 
                 | <def_statements> <def_statement> 
                 ;

<statements> = <statement> 
             | <statements> <statement> 
             ;

<statement> = <def_statement> 
            | <expr> ";" 
            | <block> 
            | <if_state>
            | <while_state>
            | <dowhile_state>
            | <dountil_state>
            | <for_state>
            | <return_state>
            ;

<if_state> = "if" "(" <expr> ")" <statement>
           | "if" "(" <expr> ")" <statement> "else" <statement>
           ;

<while_state> = "while" "(" <expr> ")" <statement>
              ;

<dowhile_state> = "do" <statement> "while" "(" <expr> ")" ";"
                ;

<dountil_state> = "do" <statement> "until" "(" <expr> ")" ";"
                ;

<for_state> = "for" "(" <expr> ";" <expr> ";" <expr> ")" <statement>
            | "for" "(" <var_def> ";" <expr> ";" <expr> ")" <statement>
            ;

<return_state> = "return" ";" 
               | "return" <expr> ";" 
               ;

<woven_state> = "woven" [id] "(" <call_args> ")"
              ;

<block> = "{" <statements> "}"
        | "{" "}"
        ;

<types> = [id] 
      | "const" [id] 
      | "*" [id] 
      | "const" "*" [id]
      | <types> [sz]
      ;

<var_def> = <types> [id]
          | <types> [id] "=" <expr>
          ;


<macro_def_args> = [id]
                 | <macro_def_args> "," [id]
                 ;

<marco_def> = "defmacro" [id] "(" <macro_def_args> ")" <block>
            ;

<macro_call> = "@" [id]
             | <macro_call> 
             | <macro_call> <block> 
             | <macro_call> [id] <block> 
             ;


<func_def> = <types> [id] "(" <func_def_args> ")" <block>
           | <types> [id] "(" <func_def_args> ")" ";"
           ;

<func_def_args> = <var_def>
                | <func_def_args> "," <var_def> 
                | e  
                ;

<new_expr> = "new" <types> 
           | "new" <types> "(" <call_args> ")"
           | <new_expr>    "[" <call_args> "]" 
           ;


<numeric> = [int] 
          | [float] 
          ;

<var_exp> = [id] 
          | <numeric> 
          | [string] 
          | "null" 
          | "true"
          | "false"
          ;

<expr>  = <expr> "=" <expr> 
        | <expr> "(" <call_args> ")" 
        | <expr> "[" <call_args> "]" 
        | <new_expr>
        | <var_exp>
        | <expr> "==" <expr> 
        | <expr> "!=" <expr> 
        | <expr> "<=" <expr> 
        | <expr> ">=" <expr> 
        | <expr> "&&" <expr> 
        | <expr> "||" <expr> 
        | <expr> ">=" <expr> 
        | <expr> "<" <expr> 
        | <expr> ">" <expr> 
        | <expr> "<" "<" <expr> 
        | <expr> ">" ">" <expr> 
        | <expr> "+" <expr> 
        | <expr> "-" <expr> 
        | <expr> "*" <expr> 
        | <expr> "/" <expr> 
        | <expr> "%" <expr> 
        | <expr> "^" <expr> 
        | <expr> "&" <expr> 
        | <expr> "|" <expr> 
        | <expr> "+=" <expr> 
        | <expr> "-=" <expr> 
        | <expr> "*=" <expr> 
        | <expr> "/=" <expr> 
        | <expr> "%=" <expr> 
        | <expr> "^=" <expr> 
        | <expr> "&=" <expr> 
        | <expr> "|=" <expr> 
        | <expr> "<<=" <expr> 
        | <expr> ">>=" <expr> 
        | <expr> "." <expr> 
        | "~" <expr> 
        | "!" <expr>
        | "++" <expr> 
        | "--" <expr> 
        | <expr> "++" 
        | <expr> "--" 
        | "(" <expr> ")"  /* ( <expr> ) */  
        ;

<call_arg>  =  <expr> 
            |  [id] "=" <expr> 
            ;

<call_args> = e 
            | <call_arg> 
            | <call_args> "," <call_arg>  
            ;

<macro_call_args> = e
                  | <call_arg>
                  | <macro_call>
                  | <macro_call_args> "," <call_arg> 
                  | <macro_call_args> "," <macro_call> 
                  ;

<list> = <var_exp>
       | <full_list>
       | "!" <types> 
       | <list> <var_exp> 
       | <list> <full_list> 
       | <list> "!" <types>  
       ;

<full_list> = "(" <list> ")" 
            ;

%right "="
%right "&=" "|=" "^=" "<<=" ">>="
%right "+=" "-="    
%right "*=" "/=" 
%left "&&" "||"
%left "&" "|" "^"
%left "<" ">" "<=" ">=" "=="
%left "+" "-"
%left "*" "/" "%"
%left "."
%right "~" "++" "--" "!"
%left "(" "[" ")" "]"
%left "@"